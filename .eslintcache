[{"D:\\dev\\spreadsheet-exam\\src\\App.js":"1","D:\\dev\\spreadsheet-exam\\src\\index.js":"2","D:\\dev\\spreadsheet-exam\\src\\components\\Spreadsheet.js":"3","D:\\dev\\spreadsheet-exam\\src\\components\\ColumnForm.js":"4","D:\\dev\\spreadsheet-exam\\src\\components\\DataTable.js":"5"},{"size":211,"mtime":1610497212853,"results":"6","hashOfConfig":"7"},{"size":218,"mtime":1610497091129,"results":"8","hashOfConfig":"7"},{"size":2294,"mtime":1610576549949,"results":"9","hashOfConfig":"7"},{"size":3963,"mtime":1610576314672,"results":"10","hashOfConfig":"7"},{"size":6213,"mtime":1610575492223,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"b0ywq0",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\dev\\spreadsheet-exam\\src\\App.js",[],["24","25"],"D:\\dev\\spreadsheet-exam\\src\\index.js",[],"D:\\dev\\spreadsheet-exam\\src\\components\\Spreadsheet.js",["26"],"D:\\dev\\spreadsheet-exam\\src\\components\\ColumnForm.js",["27","28"],"import { Row, Col, Form, Input, Select, Button, Checkbox, Card, List, Typography, Divider } from 'antd';\r\nimport { useState, useEffect } from 'react';\r\nconst { Option } = Select;\r\n\r\nconst initialValues = {\r\n  type: 'text',\r\n  tile: 'New Column',\r\n  required: true,\r\n}\r\n\r\nconst columnTypes = [\r\n  { type: \"date\", label: \"Date\" },\r\n  { type: \"select\", label: \"Select\" },\r\n  { type: \"text\", label: \"Text\" },\r\n  { type: \"number\", label: \"Number\" },\r\n]\r\n\r\nexport default function ColumnForm({ onAddColumn }) {\r\n  const [form] = Form.useForm();\r\n  const [option, setOption] = useState({ show: false, value: \"\" });\r\n  const [selectOptions, setSelectOptions] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    console.log(selectOptions);\r\n  }, [selectOptions]);\r\n\r\n  const onTypeChange = (value) => {\r\n    switch (value) {\r\n      case 'select':\r\n        setOption({ ...option, show: true });\r\n        return;\r\n      default:\r\n        setOption({ ...option, show: false });\r\n        return;\r\n    }\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    console.log(values);\r\n    if (values.type === 'select') {\r\n      if (selectOptions.length === 0) {\r\n        return;\r\n      }\r\n      values.options = selectOptions;\r\n    } \r\n    onAddColumn(values);\r\n    onReset();\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const onReset = () => {\r\n    form.resetFields();\r\n    setOption({ show: false, value: \"\" });\r\n  };\r\n\r\n  const handleOption = (evt) => {\r\n    let value = evt.target.value;\r\n    setOption({ ...option, value });\r\n  }\r\n\r\n  const onAddOption = () => {\r\n    setSelectOptions([...selectOptions, option.value]);\r\n    setOption({ show: true, value: \"\" });\r\n  }\r\n\r\n  return (\r\n    <div style={{ marginBottom: \"1rem\" }}>\r\n      <Row gutter={24}>\r\n        <Col span={12}>\r\n          <Card size=\"small\" title=\"New Column\">\r\n            <Form form={form} name=\"column-form\" initialValues={initialValues} onFinish={onFinish} onFinishFailed={onFinishFailed}>\r\n              <Form.Item label=\"Title\" name=\"title\" rules={[{ required: true, message: 'Please input column\\'s title!'}]}>\r\n                <Input placeholder=\"Column's title\" />\r\n              </Form.Item>\r\n              <Form.Item label=\"Type\" name=\"type\" rules={[{ required: true, message: 'Please select column\\'s type!'}]}>\r\n                <Select placeholder=\"Select one option\" onChange={onTypeChange}>\r\n                  { columnTypes.map((column) => <Option key={column.type} value={column.type}>{column.label}</Option>) }\r\n                </Select>\r\n              </Form.Item>\r\n              <Form.Item name=\"required\">\r\n                <Checkbox checked>Required</Checkbox>\r\n              </Form.Item>\r\n              <div style={{ display: \"flex\", justifyContent: \"flex-end\", margin: \"1rem 0 0 auto\"}}>\r\n                <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\r\n              </div>\r\n            </Form>\r\n          </Card>\r\n        </Col>\r\n        {\r\n          option.show &&\r\n          <Col span={12}>\r\n            <Card size=\"small\" title=\"Select Options\">\r\n              <Form.Item label=\"Option\" name=\"Option\" rules={[{ required: true, message: 'Please input an option' }]}>\r\n                <Input placeholder=\"Option\" value={option} onChange={handleOption} />\r\n              </Form.Item>\r\n              <div style={{ display: \"flex\", justifyContent: \"flex-end\", margin: \"1rem 0\"}}>\r\n                <Button type=\"primary\" onClick={onAddOption}>Add</Button>\r\n              </div>\r\n              {\r\n              (selectOptions.length > 0) &&\r\n              <List\r\n                bordered\r\n                dataSource={selectOptions}\r\n                renderItem={item => (\r\n                  <List.Item>\r\n                    <Typography.Text>{item}</Typography.Text> \r\n                  </List.Item>\r\n                )}\r\n              />\r\n            }\r\n            </Card>\r\n          </Col>\r\n        }\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n","D:\\dev\\spreadsheet-exam\\src\\components\\DataTable.js",["29","30"],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":25,"column":6,"nodeType":"37","endLine":25,"endColumn":15,"suggestions":"38"},{"ruleId":"39","severity":1,"message":"40","line":1,"column":83,"nodeType":"41","messageId":"42","endLine":1,"endColumn":90},{"ruleId":"39","severity":1,"message":"43","line":5,"column":7,"nodeType":"41","messageId":"42","endLine":5,"endColumn":13},{"ruleId":"44","severity":1,"message":"45","line":24,"column":22,"nodeType":"46","messageId":"47","endLine":24,"endColumn":24},{"ruleId":"44","severity":1,"message":"45","line":32,"column":25,"nodeType":"46","messageId":"47","endLine":32,"endColumn":27},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'addRow'. Either include it or remove the dependency array.","ArrayExpression",["50"],"no-unused-vars","'Divider' is defined but never used.","Identifier","unusedVar","'layout' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},"Update the dependencies array to be: [addRow, columns]",{"range":"53","text":"54"},[881,890],"[addRow, columns]"]